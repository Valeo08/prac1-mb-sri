/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Color;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.BaseHttpSolrClient.RemoteSolrException;
import org.apache.solr.client.solrj.impl.HttpSolrClient;
import org.apache.solr.common.SolrInputDocument;
import solrparser.SolrDocParser;
import solrparser.SolrQueryParser;

/**
 * @author Valeo
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelPrincipal = new javax.swing.JPanel();
        tituloPrincipal = new javax.swing.JLabel();
        panelAcciones = new javax.swing.JPanel();
        panelConectarSolr = new javax.swing.JPanel();
        labelTituloConexionSolr = new javax.swing.JLabel();
        labelColeccionSolr = new javax.swing.JLabel();
        inputColeccionSolr = new javax.swing.JTextField();
        labelPuertoSolr = new javax.swing.JLabel();
        inputPuertoSolr = new javax.swing.JTextField();
        btnConectarSolr = new javax.swing.JButton();
        labelMsgConexionSolr = new javax.swing.JLabel();
        panelCargarDocs = new javax.swing.JPanel();
        labelTituloICargarDocs = new javax.swing.JLabel();
        btnCargarDocs = new javax.swing.JButton();
        labelArchivoDocsCargado = new javax.swing.JTextField();
        btnIndexarDocs = new javax.swing.JButton();
        labelMsgCargarDocs = new javax.swing.JLabel();
        panelCargarQueries = new javax.swing.JPanel();
        labelTituloICargarQueries = new javax.swing.JLabel();
        btnCargarQueries = new javax.swing.JButton();
        labelArchivoQueriesCargado = new javax.swing.JTextField();
        btnGenerarTREC = new javax.swing.JButton();
        labelMsgCargarQueries = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MiClienteSolrj - Jesús Valeo Fernández");
        setBackground(new java.awt.Color(71, 85, 105));
        setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        setMinimumSize(new java.awt.Dimension(720, 6));
        setPreferredSize(new java.awt.Dimension(720, 640));
        setResizable(false);

        panelPrincipal.setBackground(new java.awt.Color(51, 65, 85));
        panelPrincipal.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panelPrincipal.setPreferredSize(this.getSize());
        panelPrincipal.setLayout(new java.awt.BorderLayout(10, 5));

        tituloPrincipal.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        tituloPrincipal.setForeground(new java.awt.Color(255, 255, 255));
        tituloPrincipal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tituloPrincipal.setText("Cliente Solr - Evaluación de SRI");
        tituloPrincipal.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        panelPrincipal.add(tituloPrincipal, java.awt.BorderLayout.NORTH);

        panelAcciones.setBackground(panelPrincipal.getBackground());
        panelAcciones.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10)));
        java.awt.GridBagLayout panelInputsLayout = new java.awt.GridBagLayout();
        panelInputsLayout.columnWidths = new int[] {0};
        panelInputsLayout.rowHeights = new int[] {0, 15, 0, 15, 0, 15, 0};
        panelAcciones.setLayout(panelInputsLayout);

        panelConectarSolr.setBackground(panelPrincipal.getBackground());
        panelConectarSolr.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 116, 139), 2), javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8)));
        java.awt.GridBagLayout panelConectarSolrLayout = new java.awt.GridBagLayout();
        panelConectarSolrLayout.columnWidths = new int[] {0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0};
        panelConectarSolrLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        panelConectarSolr.setLayout(panelConectarSolrLayout);

        labelTituloConexionSolr.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        labelTituloConexionSolr.setForeground(new java.awt.Color(255, 255, 255));
        labelTituloConexionSolr.setText("Conexión a Solr");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelConectarSolr.add(labelTituloConexionSolr, gridBagConstraints);

        labelColeccionSolr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelColeccionSolr.setForeground(new java.awt.Color(255, 255, 255));
        labelColeccionSolr.setText("Colección de Solr");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelConectarSolr.add(labelColeccionSolr, gridBagConstraints);

        inputColeccionSolr.setBackground(new java.awt.Color(100, 116, 139));
        inputColeccionSolr.setColumns(15);
        inputColeccionSolr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        inputColeccionSolr.setForeground(new java.awt.Color(255, 255, 255));
        inputColeccionSolr.setText("micoleccion");
        inputColeccionSolr.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelConectarSolr.add(inputColeccionSolr, gridBagConstraints);

        labelPuertoSolr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelPuertoSolr.setForeground(new java.awt.Color(255, 255, 255));
        labelPuertoSolr.setText("Puerto de Solr");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelConectarSolr.add(labelPuertoSolr, gridBagConstraints);

        inputPuertoSolr.setBackground(new java.awt.Color(100, 116, 139));
        inputPuertoSolr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        inputPuertoSolr.setForeground(new java.awt.Color(255, 255, 255));
        inputPuertoSolr.setText("8983");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelConectarSolr.add(inputPuertoSolr, gridBagConstraints);

        btnConectarSolr.setBackground(panelPrincipal.getBackground().darker().darker());
        btnConectarSolr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnConectarSolr.setForeground(new java.awt.Color(255, 255, 255));
        btnConectarSolr.setText("Conectar");
        btnConectarSolr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConectarSolrMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelConectarSolr.add(btnConectarSolr, gridBagConstraints);

        labelMsgConexionSolr.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        labelMsgConexionSolr.setForeground(new java.awt.Color(255, 255, 255));
        labelMsgConexionSolr.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelConectarSolr.add(labelMsgConexionSolr, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelAcciones.add(panelConectarSolr, gridBagConstraints);

        panelCargarDocs.setBackground(panelPrincipal.getBackground());
        panelCargarDocs.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 116, 139), 2), javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8)));
        panelCargarDocs.setLayout(new java.awt.GridBagLayout());

        labelTituloICargarDocs.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        labelTituloICargarDocs.setForeground(new java.awt.Color(255, 255, 255));
        labelTituloICargarDocs.setText("Indexar Documentos");
        labelTituloICargarDocs.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCargarDocs.add(labelTituloICargarDocs, gridBagConstraints);

        btnCargarDocs.setBackground(panelPrincipal.getBackground().darker().darker());
        btnCargarDocs.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCargarDocs.setForeground(new java.awt.Color(255, 255, 255));
        btnCargarDocs.setText("Seleccionar fichero");
        btnCargarDocs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCargarDocsMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCargarDocs.add(btnCargarDocs, gridBagConstraints);

        labelArchivoDocsCargado.setBackground(panelPrincipal.getBackground());
        labelArchivoDocsCargado.setColumns(28);
        labelArchivoDocsCargado.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelArchivoDocsCargado.setForeground(new java.awt.Color(255, 255, 255));
        labelArchivoDocsCargado.setText("Ningún fichero de documentos seleccionado.");
        labelArchivoDocsCargado.setToolTipText("");
        labelArchivoDocsCargado.setBorder(null);
        labelArchivoDocsCargado.setFocusable(false);
        labelArchivoDocsCargado.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        panelCargarDocs.add(labelArchivoDocsCargado, gridBagConstraints);

        btnIndexarDocs.setBackground(panelPrincipal.getBackground().darker().darker());
        btnIndexarDocs.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnIndexarDocs.setForeground(new java.awt.Color(255, 255, 255));
        btnIndexarDocs.setText("Indexar");
        btnIndexarDocs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnIndexarDocsMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCargarDocs.add(btnIndexarDocs, gridBagConstraints);

        labelMsgCargarDocs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        labelMsgCargarDocs.setForeground(new java.awt.Color(255, 255, 255));
        labelMsgCargarDocs.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCargarDocs.add(labelMsgCargarDocs, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelAcciones.add(panelCargarDocs, gridBagConstraints);

        panelCargarQueries.setBackground(panelPrincipal.getBackground());
        panelCargarQueries.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 116, 139), 2), javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8)));
        panelCargarQueries.setLayout(new java.awt.GridBagLayout());

        labelTituloICargarQueries.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        labelTituloICargarQueries.setForeground(new java.awt.Color(255, 255, 255));
        labelTituloICargarQueries.setText("Generar fichero para TREC EVAL");
        labelTituloICargarQueries.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCargarQueries.add(labelTituloICargarQueries, gridBagConstraints);

        btnCargarQueries.setBackground(panelPrincipal.getBackground().darker().darker());
        btnCargarQueries.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCargarQueries.setForeground(new java.awt.Color(255, 255, 255));
        btnCargarQueries.setText("Seleccionar fichero");
        btnCargarQueries.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCargarQueriesMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCargarQueries.add(btnCargarQueries, gridBagConstraints);

        labelArchivoQueriesCargado.setBackground(panelPrincipal.getBackground());
        labelArchivoQueriesCargado.setColumns(28);
        labelArchivoQueriesCargado.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelArchivoQueriesCargado.setForeground(new java.awt.Color(255, 255, 255));
        labelArchivoQueriesCargado.setText("Ningún fichero de consultas seleccionado.");
        labelArchivoQueriesCargado.setToolTipText("");
        labelArchivoQueriesCargado.setBorder(null);
        labelArchivoQueriesCargado.setFocusable(false);
        labelArchivoQueriesCargado.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        panelCargarQueries.add(labelArchivoQueriesCargado, gridBagConstraints);

        btnGenerarTREC.setBackground(panelPrincipal.getBackground().darker().darker());
        btnGenerarTREC.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnGenerarTREC.setForeground(new java.awt.Color(255, 255, 255));
        btnGenerarTREC.setText("Generar");
        btnGenerarTREC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGenerarTRECMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCargarQueries.add(btnGenerarTREC, gridBagConstraints);

        labelMsgCargarQueries.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        labelMsgCargarQueries.setForeground(new java.awt.Color(255, 255, 255));
        labelMsgCargarQueries.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCargarQueries.add(labelMsgCargarQueries, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelAcciones.add(panelCargarQueries, gridBagConstraints);

        panelPrincipal.add(panelAcciones, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarSolrMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConectarSolrMouseClicked
        // Intentar conexión a Solr
        String coleccion = this.inputColeccionSolr.getText();
        String puerto = this.inputPuertoSolr.getText();
        
        if (coleccion.equals("") || puerto.equals(""))
            mostrarAlerta("Los campos colección y/o puerto no pueden estar vacíos!",
                    "Error en los datos de conexión");
        
        try {
            btnConectarSolr.setEnabled(false);
            labelMsgConexionSolr.setForeground(Color.WHITE);
            labelMsgConexionSolr.setText("Conectando...");
            
            solr = new HttpSolrClient.Builder("http://localhost:" 
                    + puerto + "/solr/" + coleccion).build();
            solr.ping();
            
            labelMsgConexionSolr.setForeground(new Color(0x27AE60));
            labelMsgConexionSolr.setText("Conexión a Solr realizada con éxito!");
            
            conectado = true;
            
            inputColeccionSolr.setEnabled(false);
            inputPuertoSolr.setEnabled(false);
        } catch (RemoteSolrException | SolrServerException | IOException ex) {
            labelMsgConexionSolr.setForeground(new Color(0xC0392B));
            labelMsgConexionSolr.setText("Intento de conexión a Solr sin éxito!");
            
            mostrarAlerta("Error al conectar con Solr!", 
                    "Error de conexión con Solr");
            try { solr.close(); } catch (IOException ex2) {}
            solr = null;
        } finally {
            if (!conectado) btnConectarSolr.setEnabled(true);
        }
    }//GEN-LAST:event_btnConectarSolrMouseClicked

    private void btnIndexarDocsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnIndexarDocsMouseClicked
        // Indexar documentos
        if (conectado) { // Comprobar que se ha establecido conexión con Solr
            try {
                btnIndexarDocs.setEnabled(false);
                
                labelMsgCargarDocs.setForeground(Color.WHITE);
                labelMsgCargarDocs.setText("Indexando ficheros...");
                
                for (SolrInputDocument doc : docs)
                    solr.add(doc);
                solr.commit();
                
                labelMsgCargarDocs.setForeground(new Color(0x27AE60));
                labelMsgCargarDocs.setText("Documentos indexados con éxito!");
            } catch (SolrServerException | IOException ex) {
                mostrarAlerta("Se ha producido un error al intentar\n"
                        + "indexar los documentos en Solr.", 
                        "Error al indexar documentos!");
            }
        } else {
            mostrarAlerta("No estás conectado a Solr!", "Sin conexión");
        }
    }//GEN-LAST:event_btnIndexarDocsMouseClicked

    private void btnGenerarTRECMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGenerarTRECMouseClicked
        // Realizar consultas y generar un fichero para TREC EVAL
        if (conectado) { // Comprobar que se ha establecido conexión con Solr
            String trecFileName = "./trec_eval_gen/trec_solr_file";
            
            try {
                btnGenerarTREC.setEnabled(false);
                
                labelMsgCargarQueries.setForeground(Color.WHITE);
                labelMsgCargarQueries.setText("Generando fichero...");
                
                SolrQueryParser.generateTrecEvalFile(trecFileName, queries, solr);
                
                labelMsgCargarQueries.setForeground(new Color(0x27AE60));
                labelMsgCargarQueries.setText("Generado el fichero trec_solr_file en el"
                        + " directorio trec_eval_gen");
            } catch (SolrServerException | IOException ex) {
                mostrarAlerta("Se ha producido un error al intentar\n"
                        + "generar el fichero de evaluación para el\n"
                        + "programa TREC EVAL.", 
                        "Error al generar el fichero para TREC EVAL!");
            }
        } else {
            mostrarAlerta("No estás conectado a Solr!", "Sin conexión");
        }
    }//GEN-LAST:event_btnGenerarTRECMouseClicked

    private void btnCargarDocsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCargarDocsMouseClicked
        // Cargar documentos para indexar
        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory(new File("."));
        jfc.setDialogTitle("Selecciona un fichero de documentos para indexar");
        jfc.setMultiSelectionEnabled(false);
        int resp = jfc.showOpenDialog(this);

        if (resp == JFileChooser.APPROVE_OPTION) {
            if (!btnIndexarDocs.isEnabled()) btnIndexarDocs.setEnabled(true);
            
            labelMsgCargarDocs.setForeground(Color.WHITE);
            labelMsgCargarDocs.setText("Cargando documentos...");
            
            docs = SolrDocParser.parseDocs(jfc.getSelectedFile().getAbsolutePath());
            
            if (docs != null && !docs.isEmpty()) {
                labelArchivoDocsCargado.setText(jfc.getSelectedFile().getName());
                labelMsgCargarDocs.setForeground(new Color(0x27AE60));
                labelMsgCargarDocs.setText("Documentos cargados con éxito!");
            } else {
                labelArchivoDocsCargado
                    .setText("Ningún fichero de documentos seleccionado.");
                labelMsgCargarDocs.setForeground(new Color(0xC0392B));
                labelMsgCargarDocs.setText("Error al cargar los documentos!");
            }
        }
    }//GEN-LAST:event_btnCargarDocsMouseClicked

    private void btnCargarQueriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCargarQueriesMouseClicked
        // Cargar consultas para evaluar el SRI
        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory(new File("."));
        jfc.setDialogTitle("Selecciona un fichero de consultas para evaluar el SRI");
        jfc.setMultiSelectionEnabled(false);
        int resp = jfc.showOpenDialog(this);
        
        if (resp == JFileChooser.APPROVE_OPTION) {
            if (!btnGenerarTREC.isEnabled()) btnGenerarTREC.setEnabled(true);
            
            labelMsgCargarQueries.setForeground(Color.WHITE);
            labelMsgCargarQueries.setText("Cargando consultas...");
            
            queries = SolrQueryParser.parseQueries(jfc.getSelectedFile().getAbsolutePath());
            
            if (queries != null && !queries.isEmpty()) {
                labelArchivoQueriesCargado.setText(jfc.getSelectedFile().getName());
                labelMsgCargarQueries.setForeground(new Color(0x27AE60));
                labelMsgCargarQueries.setText("Consultas cargadas con éxito!");
            } else {
                labelArchivoQueriesCargado
                    .setText("Ningún fichero de consultas seleccionado.");
                labelMsgCargarQueries.setForeground(new Color(0xC0392B));
                labelMsgCargarQueries.setText("Error al cargar las consultas!");
            }
        }
    }//GEN-LAST:event_btnCargarQueriesMouseClicked

    private void mostrarAlerta(final String texto, final String titulo) {
        Toolkit.getDefaultToolkit().beep();
        JOptionPane optionPane = new JOptionPane(texto,JOptionPane.WARNING_MESSAGE);
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }
    
    // Variables para el funcionamiento del programa
    private HttpSolrClient solr = null;
    private boolean conectado = false;
    private ArrayList<SolrInputDocument> docs = null;
    private ArrayList<SolrQuery> queries = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarDocs;
    private javax.swing.JButton btnCargarQueries;
    private javax.swing.JButton btnConectarSolr;
    private javax.swing.JButton btnGenerarTREC;
    private javax.swing.JButton btnIndexarDocs;
    private javax.swing.JTextField inputColeccionSolr;
    private javax.swing.JTextField inputPuertoSolr;
    private javax.swing.JTextField labelArchivoDocsCargado;
    private javax.swing.JTextField labelArchivoQueriesCargado;
    private javax.swing.JLabel labelColeccionSolr;
    private javax.swing.JLabel labelMsgCargarDocs;
    private javax.swing.JLabel labelMsgCargarQueries;
    private javax.swing.JLabel labelMsgConexionSolr;
    private javax.swing.JLabel labelPuertoSolr;
    private javax.swing.JLabel labelTituloConexionSolr;
    private javax.swing.JLabel labelTituloICargarDocs;
    private javax.swing.JLabel labelTituloICargarQueries;
    private javax.swing.JPanel panelAcciones;
    private javax.swing.JPanel panelCargarDocs;
    private javax.swing.JPanel panelCargarQueries;
    private javax.swing.JPanel panelConectarSolr;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JLabel tituloPrincipal;
    // End of variables declaration//GEN-END:variables
}
